#!/usr/bin/ruby
require 'erb'

class HostClass
  attr_reader :name, :domain, :ip_offset, :vm_prefix, :subnet, :ip

  def initialize(idx, vm_prefix, subnet, ip_offset)
    @name = "%s-%02d" % [vm_prefix, idx]
    @domain = ".interubernet.local"
    @vm_prefix = vm_prefix
    @subnet = subnet
    @ip_offset = ip_offset
    @ip = subnet+"."+ip_offset
  end

  def display_details()
    puts "Name: #@name"
    puts "Domain: #@domain"
    puts "VM prefix: #@vm_prefix"
    puts "Network: #@subnet"
    puts "IP offset: #@ip_offset"
    puts "IP: #@ip"
  end
end

def get_hosts()
  hosts = []

  (1..3).each do |i|
    hosts.push(HostClass.new(i, "ubuntu", "10.20.30", "#{i+70}"))
  end
  (4..5).each do |i|
    hosts.push(HostClass.new(i, "ubuntu", "192.168.50", "#{i+70}"))
  end
  hosts
end

# hosts = get_hosts
#
# hosts[1..-1].each do |x|
#   x.display_details()
#   #print x.ip + "\n"
#   print "\n"
# end


def get_hosts_file_template()
  %{# This file is generated by the Vagrantfile and is overwritten when machine is provisioned

# The following lines are desirable for IPv4 capable hosts
127.0.0.1       localhost

# 127.0.1.1 is often used for the FQDN of the machine
127.0.0.1 <%= @current_host.name %><%= @current_host.domain %> vagrant.vm vagrant
<% for @host in @all_hosts %><%=
@host.ip %> <%= @host.name %><%= @host.domain %> <%= @host.name %>
<% end %>

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters

}
end

class HostFileRenderer
  include ERB::Util
  attr_accessor :items, :template

  def initialize(current_host, all_hosts, template)
    @current_host = current_host
    @all_hosts = all_hosts
    @template = template
  end

  def render()
    ERB.new(@template).result(binding)
  end

  def save(file)
    File.open(file, "w+") do |f|
      f.write(render)
    end
  end

end


get_hosts[0..-1].each do |host|
  list = HostFileRenderer.new(host, get_hosts, get_hosts_file_template)
  list.save(File.join(host.name+'.hosts'))
end


